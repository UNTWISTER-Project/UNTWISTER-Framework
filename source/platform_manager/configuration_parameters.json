{
    "data_collection": {
        "sensors": {
            "PS": {
                "exchange": "fmi_digital_twin",
                "queue": "CPES",
                "routing_key": "sim1.data.from_physical_twin"
            },
            "DT": {
                "exchange": "fmi_digital_twin",
                "queue": "DT",
                "routing_key": "sim1.data.from_DT"
            }
        }
    },
    "detection_classification": { 
        "mlp_features": {
            "instant": {
                "distance_Error": {
                    "expression": "lead.leadInstance.x - ego.egoInstance.x - 15"
                },
                "speed_Difference": {
                    "expression": "lealead_speed_attack_plus_constantd.leadInstance.speed - ego.egoInstance.speed"
                },
                "desired_acceleration": {
                    "expression": "cacc.caccInstance.accel"
                }
            },
            "rolling": {
                "distance_Error_mean": {
                    "expression": "distance_Error.rolling(window=window_size).mean()",
                    "rolling_window": 5
                },
                "distance_Error_std": {
                    "expression": "distance_Error.rolling(window=window_size).std()",
                    "rolling_window": 5
                },
                "speed_Difference_mean": {
                    "expression": "speed_Difference.rolling(window=window_size).mean()",
                    "rolling_window": 5
                },
                "speed_Difference_std": {
                    "expression": "speed_Difference.rolling(window=window_size).std()",
                    "rolling_window": 5
                },
                "lead_speed_variance": {
                    "expression": "speed_Difference.rolling(window=window_size).var()",
                    "rolling_window": 5
                },
                "acceleration_diff_mean": {
                    "expression": "acceleration_diff.rolling(window=window_size).mean()",
                    "rolling_window": 5
                },
                "acceleration_diff_std": {
                    "expression": "acceleration_diff.rolling(window=window_size).std()",
                    "rolling_window": 5
                }
            }
        },
        "state_variables": {
            "raw": [
                "ego_x",
                "lead_x",
                "ego_speed",
                "lead_speed",
                "cacc_accel"
            ],
            "composed": {
                "timeoffset": "simstep / 1000"
            }
        }
    },
    "use_model_creation": false,
    "model_creation": {
        "dse": {
            "lead_speed_attack_plus_constant": {
                "dse_conf": {
                    "algorithm": {
                        "type": "exhaustive"
                    },
                    "objectiveConstraints": [],
                    "objectiveDefinitions": {
                        "externalScripts": {},
                        "internalFunctions": {}
                    },
                    "parameterConstraints": [],
                    "parameters": {
                        "{acc}.accInstance.baseAcceleration.globalSeed.fixedSeed": [],
                        "{lead}.leadInstance.egoWithNoise.globalSeed.fixedSeed": [],
                        "{leadDT}.leadDTInstance.globalSeed.fixedSeed": [],
                        "{ego}.egoInstance.globalSeed.fixedSeed": [],
                        "{plus_constant_attack}.plus_constant_attackInstance.seed": []
                    },
                    "ranking": {
                        "pareto": {}
                    },
                    "scenarios": []
                },
                "coe_conf": {
                    "startTime": 0,
                    "endTime": 100,
                    "multimodel_path": "Multi-models/leadSpeedAttackPlusConstant/mm.json",
                    "liveGraphColumns": 1,
                    "liveGraphVisibleRowCount": 1,
                    "graphs": [],
                    "livestreamInterval": 0,
                    "logVariables": {},
                    "visible": false,
                    "loggingOn": false,
                    "overrideLogLevel": null,
                    "enableAllLogCategoriesPerInstance": false,
                    "algorithm": {
                      "type": "fixed-step",
                      "size": 0.01
                    },
                    "postProcessingScript": "",
                    "multimodel_crc": "e9173d2a4755c93560c211e7fa0309ad",
                    "parallelSimulation": false,
                    "stabalizationEnabled": false,
                    "global_absolute_tolerance": 0,
                    "global_relative_tolerance": 0.01,
                    "simulationProgramDelay": false,
                    "convergenceAttempts": 5
                  }
            }
        }, 
        "mlp_features": {
            "instant": {
                "lead_x_difference": {
                    "expression": "lead.leadInstance.noisyX - leadDT.leadDTInstance.x"
                },
                "lead_speed_difference": {
                    "expression": "lead.leadInstance.noisySpeed - leadDT.leadDTInstance.speed"
                },
                "lead_acc_difference": {
                    "expression": "lead.leadInstance.noisyOutputAccel - leadDT.leadDTInstance.outputAccel"
                },
                "ego_x_difference": {
                    "expression": "ego.egoInstance.noisyX - egoDT.egoDTInstance.x"
                },
                "ego_speed_difference": {
                    "expression": "ego.egoInstance.noisySpeed - egoDT.egoDTInstance.speed"
                },
                "cacc_acc_difference": {
                    "expression": "cacc.caccInstance.accel_physical - caccDT.caccDTInstance.accel"
                }
            },
            "rolling": {
            }
        },
        "attacks": {
            "normal": 0,
            "lead_speed_attack_ramp": 1,
            "lead_speed_attack_plus_constant": 2,
            "other_attack": -1
        }
    },
    "reconfiguration": {
        "sensors": {
            "cacc_sensor": {
                "exchange": "fmi_digital_twin",
                "queue": "physical_system_data_sub",
                "routing_key": "sim1.data.to_cosim"
            }
        }
    }
}